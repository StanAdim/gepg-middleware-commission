<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('bills', function (Blueprint $table) {
            $table->id();

            $table->string('req_id', 100)->unique()
                  ->comment('[ReqId] Service Provider Unique Bill Request Identification number');
            $table->string('sp_grp_code', 10)
                  ->comment('[SpGrpCode] Service Provider Group Code');
            $table->string('sys_code', 10)
                  ->comment('[SysCode] Service Provider Identification Code');
            $table->integer('bill_typ')
                  ->comment('[BillTyp] Type of the bill');
            $table->integer('pay_typ')
                  ->comment('[PayTyp] Payment Type: 1 – Pay All Bill Control Numbers At Once, 2 – Pay any Bill Control Number');
            $table->string('grp_bill_id', 100)
                  ->comment('[GrpBillId] Unique identification of the Bill in Service Provider Billing System');
            $table->string('bill_id', 100)
                  ->comment('[BillId] Unique identification of the Bill in Service Provider Billing System');
            $table->string('sp_code', 10)
                  ->comment('[SpCode] Service Provider Code');
            $table->string('coll_cent_code', 20)->nullable()
                  ->comment('[CollCentCode] Code identifying Service Provider Collection Centre');
            $table->text('bill_desc')->nullable()
                  ->comment('[BillDesc] Bill Description');
            $table->string('cust_tin', 50)
                  ->comment('[CustTin] Customer Tax Identification Number (TIN)');
            $table->string('cust_id', 50)
                  ->comment('[CustId] Customer Reference');
            $table->string('cust_id_typ')
                  ->comment('[CustIdTyp] Customer Identification Reference Type');
            $table->string('cust_accnt', 50)
                  ->comment('[CustAccnt] Customer Account Number');
            $table->string('cust_name', 200)
                  ->comment('[CustName] Customer Name');
            $table->string('cust_cell_num', 12)->nullable()
                  ->comment('[CustCellNum] Customer Mobile/Cell Number should have twelve digits including country code e.g. 255XXXXXXXXX');
            $table->string('cust_email', 30)->nullable()
                  ->comment('[CustEmail] Customer Email Address');
            $table->dateTime('bill_gen_dt')
                  ->comment('[BillGenDt] Bill Generation Date with format YYYY-MM-DDTHH24:MI:SS (Accepts today and past dates only)');
            $table->dateTime('bill_expr_dt')
                  ->comment('[BillExprDt] Bill Expiry Date with format YYYY-MM-DDTHH24:MI:SS');
            $table->string('bill_gen_by', 30)->nullable()
                  ->comment('[BillGenBy] Bill Generated By');
            $table->string('bill_appr_by', 30)->nullable()
                  ->comment('[BillApprBy] Bill Approved By');
            $table->decimal('bill_amt', 32, 2)
                  ->comment('[BillAmt] Billed Amount can be decimal with precision of two');
            $table->decimal('bill_eqv_amt', 32, 2)
                  ->comment('[BillEqvAmt] Equivalent Billed Amount should be equal to the summation of all item equivalent amounts. Always submitted as TZS.');
            $table->decimal('min_pay_amt', 32, 2)
                  ->comment('[MinPayAmt] Minimum Bill Payable Amount - This field carries the minimum amount payable value of a specific bill. This field is most relevant in PARTIAL, LIMITED, and INFINITY bill pay options.');
            $table->string('ccy', 3)
                  ->comment('[Ccy] Currency Code - Billed Amount Currency must be standard currency code');
            $table->decimal('exch_rate', 32, 2)
                  ->comment('[ExchRate] Billed Amount Currency Exchange Rate Value to Tanzanian Shillings');
            $table->integer('bill_pay_opt')
                  ->comment('[BillPayOpt] Bill Payment Options define the rules with which the bill should be paid. Can have values: 1: FULL Bill (paid in one instalment), 2: PARTIAL Bill (multiple instalments), 3: EXACT Bill (paid exactly equal to billed amount), 4: INFINITY Payment Option (any amount greater than zero), 5: LIMITED Payment Option (single or multiple instalments)');
            $table->integer('pay_plan')->default(1)
                  ->comment('[PayPlan] Bill Payment Plan (Default: 1): 1: POST-PAID (bill issued after service assessment), 2: PRE-PAID (payment for service defined and submitted by customer)');
            $table->integer('pay_lim_typ')
                  ->comment('[PayLimTyp] Bill Payment Limitation Type: 1: Normal Payment (No Limitation), 2: All Commercial Bank Payment Limitation, 3: Central Bank Limitation, 4: Central Bank and Specific Commercial Bank Limitation, 5: Specific Commercial Bank Limitation');
            $table->decimal('pay_lim_amt', 32, 2)
                  ->comment('[PayLimAmt] Payment Limitation Amount - This field carries the maximum limitation value for a transaction');
            $table->string('coll_psp', 100)
                  ->comment('[CollPsp] Collection Payment Service Provider - This field carries a list of only PSP Codes allowed to settle a specific bill');
            $table->string('bill_cntr_num', 50)
                  ->comment('[BillCntrNum] Bill Control Number');
            $table->text('reuse_reasn')->nullable()
                  ->comment('[ReuseReasn] Reason for Bill Reuse');
            $table->boolean('rtr_resp_flg')->default(false)
                  ->comment('[RtrRespFlg] Return Response Flag - Boolean if True then response for the submit request is required');
            $table->boolean('rem_flag')
                  ->comment('[RemFlag] Reminder Flag - True if reminder must be sent to the billed entity');
            $table->string('cust_cntr_num', 20)
                  ->comment('[CustCntrNum] Customer Control Number');
            $table->string('cancl_reasn', 255)
                  ->comment('[CanclReasn] Bill Cancellation reason');
            $table->string('bill_sts_code', 100)
                  ->comment('[BillStsCode] Bill Status Code');
            $table->string('bill_sts_desc', 500)
                  ->comment('[BillStsDesc] Bill Status Description');
            $table->string('cancl_gen_by', 30)
                  ->comment('[CanclGenBy] Individual initiated bill cancellation from SP system');
            $table->string('cancl_appr_by', 30)
                  ->comment('[CanclApprBy] Individual initiated bill approved cancellation from SP system');
            $table->string('cancl_sts', 2)
                  ->comment('[CanclSts] Bill Cancellation General Status: GF – GePG Failure, GS – GePG Success');
            $table->string('cancl_sts_code', 100)
                  ->comment('[CanclStsCode] Bill Cancellation Status Code');
            $table->string('cancl_sts_desc', 500)
                  ->comment('[CanclStsDesc] Bill Cancellation Status Description');

            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('bills');
    }
};
